<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>🐳 Docker 从入门到实践指南</title>
      <link href="/2024/12/01/6/"/>
      <url>/2024/12/01/6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.docker.com/wp-content/uploads/2022/03/vertical-logo-monochromatic.png" alt="Docker架构图"></p><h2 id="🌟-Docker-核心价值"><a href="#🌟-Docker-核心价值" class="headerlink" title="🌟 Docker 核心价值"></a>🌟 Docker 核心价值</h2><p>传统应用部署面临的挑战：</p><ul><li>🚫 ​<strong>环境差异</strong>​：开发&#x2F;测试&#x2F;生产环境不一致</li><li>🐌 ​<strong>启动缓慢</strong>​：虚拟机启动需分钟级</li><li>📦 ​<strong>臃肿体积</strong>​：包含完整操作系统镜像</li><li>🔧 ​<strong>复杂配置</strong>​：依赖库版本冲突</li></ul><p>Docker的解决方案：</p><ul><li>✅ ​<strong>标准化封装</strong>​：将应用+依赖打包成镜像</li><li>⚡ ​<strong>秒级启动</strong>​：容器直接运行于宿主内核</li><li>🪶 ​<strong>轻量级</strong>​：共享OS内核，镜像仅MB级</li><li>🔄 ​<strong>可移植性</strong>​：Build once, run anywhere</li></ul><blockquote><p>💡 类比：虚拟机是整栋房子，容器是公寓里的独立房间</p></blockquote><h2 id="🧩-核心概念解析"><a href="#🧩-核心概念解析" class="headerlink" title="🧩 核心概念解析"></a>🧩 核心概念解析</h2><table><thead><tr><th>概念</th><th>比喻</th><th>关键特性</th></tr></thead><tbody><tr><td>​<strong>Dockerfile</strong>​</td><td>施工蓝图</td><td>文本文件，包含构建指令</td></tr><tr><td>​<strong>Image</strong>​</td><td>房屋设计图</td><td>只读模板，包含完整应用环境</td></tr><tr><td>​<strong>Container</strong>​</td><td>建好的房子</td><td>镜像的运行实例</td></tr><tr><td>​<strong>Registry</strong>​</td><td>设计图仓库（如Docker Hub）</td><td>镜像存储分发中心</td></tr></tbody></table><!-- ![Docker工作流程](https://docs.docker.com/get-started/images/architecture.svg) --><h2 id="🛠️-安装指南（各平台）"><a href="#🛠️-安装指南（各平台）" class="headerlink" title="🛠️ 安装指南（各平台）"></a>🛠️ 安装指南（各平台）</h2><p>如果你使用的是windows和mac，那么你可以在官网直接下载docker desktop，然后安装即可。<br>并且在windows10以上系统可以使用wsl2，在wsl2中安装docker desktop，然后就可以在wsl2中运行docker了。<br>在linux中我们可以直接使用包管理工具安装文档安装。<br>详细步骤参考<a href="/2024/11/11/4/">Docker 安装全平台指南</a></p><h2 id="🚀-实战：部署Python应用"><a href="#🚀-实战：部署Python应用" class="headerlink" title="🚀 实战：部署Python应用"></a>🚀 实战：部署Python应用</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>&#x2F;flask-demo<br>├── Dockerfile<br>├── app.py<br>└── requirements.txt</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>首先在应用的根目录下创建dockerfile文件，然后编写dockerfile文件内容。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制依赖文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制应用代码</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;--bind&quot;</span>, <span class="string">&quot;0.0.0.0:5000&quot;</span>, <span class="string">&quot;app:app&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="构建与运行"><a href="#构建与运行" class="headerlink" title="构建与运行"></a>构建与运行</h3><p>在Dockerfile中，COPY命令用于将宿主机上的文件复制到镜像中，CMD命令用于设置容器启动后执行的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -t flask-demo .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -dp 5000:5000 flask-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行中容器</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>构建完成后，就可以在浏览器中访问localhost:5000，看到Flask的欢迎页面。</p><h2 id="三种挂载方式对比"><a href="#三种挂载方式对比" class="headerlink" title="三种挂载方式对比"></a>三种挂载方式对比</h2><table><thead><tr><th>类型</th><th>存储位置</th><th>生命周期性</th><th>适用场景</th></tr></thead><tbody><tr><td>​<strong>​Volume​</strong>​</td><td>Docker管理目录</td><td>独立于容器</td><td>生产环境数据库</td></tr><tr><td>​<strong>​Bind Mount</strong>​</td><td>主机指定路径</td><td>跟随主机文件系统</td><td>开发环境代码挂载</td></tr><tr><td>​<strong>​tmpfs​</strong>​</td><td>内存</td><td>容器停止即消失</td><td>敏感临时数据</td></tr></tbody></table><h2 id="Docker-Desktop的应用"><a href="#Docker-Desktop的应用" class="headerlink" title="Docker Desktop的应用"></a>Docker Desktop的应用</h2><p>我们通过docker desktop可以很方便的管理docker容器，比如可以查看容器列表，可以启动容器，可以停止容器，可以删除容器，可以查看容器日志，可以查看容器状态，可以查看容器的端口映射，可以查看容器的资源使用情况，可以查看容器的日志，可以查看容器的配置，可以查看容器的运行状态，可以查看容器的运行命令，可以查看容器的运行参数，可以查看容器的运行环境变量，可以查看容器的运行目录，可以查看容器的运行文件，可以查看容器的运行日志，可以查看容器的运行。</p><p>常见命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列举所有的容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop &lt;container_id&gt;</span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart &lt;container_id&gt;</span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> &lt;container_id&gt;</span><br><span class="line"><span class="comment"># 启动一个远程shell</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container_id&gt; /bin/bash</span><br></pre></td></tr></table></figure><h2 id="volumes的介绍"><a href="#volumes的介绍" class="headerlink" title="volumes的介绍"></a>volumes的介绍</h2><p>需要注意的是，容器删除时，会删除容器的镜像，但是不会删除容器所使用的镜像。之前所做的操作，都是基于一个镜像的，所以，当容器删除后，镜像依然存在。但新添加的数据会丢失，这时我们可以使用volumes 来保存数据。<br>在docker中，volumes 是一个持久化数据的存储容器。你可以把Volumes 当作一个持久化数据的存储容器。<br>比如你在某个容器中修改了某个volumes 中的文件，当这个容器被删除后，这个volumes 中的文件也会被修改。<br>我们可以通过docker volmes create 命令来创建一个volumes。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create my-volumes</span><br></pre></td></tr></table></figure><p>随后在启动容器的时候，使用volumes-from 来指定这个volumes。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name my-container --volumes-from my-volumes ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">docker run -dp 80:5000 -v my-finance-data:/etc/finance my-finance</span><br></pre></td></tr></table></figure><p>这里可以看到我们将my-finance-data 这个volumes 挂载到了这个路径下&#x2F;etc&#x2F;finance的my-finance 这个容器中。<br>向这个路径中写入的任何数据，都会被保存在这个数据卷中。</p><h2 id="容器的使用"><a href="#容器的使用" class="headerlink" title="容器的使用"></a>容器的使用</h2><p>之前的例子中都只涉及单个容器，但在实际使用中，我们的应用程序可能会用到多个容器共同协作。<br>比如我们可以使用一个容器来运行web应用，另一个容器来运行数据库，第三个容器来运行缓存，第四个容器来运行日志收集。<br>这样可以做到数据和应用逻辑的分离，提高系统的可用性。<br>比如当web程序宕机了，其他容器还可以继续运行。这时只需要修复web程序，其他容器不会受到影响。<br>而docker-compose可以让多个容器一起运行，并且可以方便的管理多个容器。<br>我们可以创建一个docker-compose.yml文件，然后使用docker-compose up命令来启动多个容器。<br>在这个文件下面，我们定义了四个容器，分别是web、db、cache和log。<br>我们在web容器中，设置了一个环境变量，这个环境变量的值是db容器的IP地址。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:5000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./:/code</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">redis-data:</span></span><br></pre></td></tr></table></figure><p>这个时候我们可以使用docker-compose up命令来启动我们的容器，<br>运行docker-compose up命令后，Docker Compose 会自动创建并启动三个容器，分别是db、cache和log。<br>容器db和cache的日志会保存在my-finance-data目录下，而容器log的日志会保存在&#x2F;var&#x2F;log&#x2F;nginx目录下。</p><p>与这个命令对应的是docker-compose down命令，这个命令会停止并删除所有容器，并删除所有相关联的镜像和卷。</p><p>这些操作也可以在图形化界面中完成，可以帮助我们在Docker中管理多个容器，并实现容器之间的数据共享和日志记录。</p><h2 id="☸️-Docker与Kubernetes关系"><a href="#☸️-Docker与Kubernetes关系" class="headerlink" title="☸️ Docker与Kubernetes关系"></a>☸️ Docker与Kubernetes关系</h2><p>Docker和Kubernetes都是用于容器化应用管理的开源平台。<br>Docker是一个开源的容器引擎，它允许开发者打包他们的应用以及依赖库到一个轻量级、可移植的容器中，然后发布到任何流行的主机上。Docker容器可以运行在任何支持Linux的机器上，并且可以轻松地部署和分发。<br>Kubernetes是一个开源的容器集群管理系统，它提供了一种简单的方式来管理容器化应用，包括自动扩展和负载均衡。Kubernetes使用容器化应用来构建和运行容器化应用，并使用容器组来管理容器化应用。<br>实际上kubernetes和docker并不是同一个层面的，docker是一个容器引擎，而kubernetes是一个容器编排工具，它使用docker作为容器引擎。<br>kubernetes所做的事情是：</p><ol><li>容器编排：kubernetes使用容器编排工具来管理容器化应用，包括自动扩展和负载均衡。</li><li>服务发现和负载均衡：kubernetes使用服务发现和负载均衡来管理容器化应用，包括自动扩展和负载均衡。</li><li>自动化部署：kubernetes使用自动化部署来管理容器化应用，包括自动扩展和负载均衡。</li><li>监控和日志：kubernetes使用监控和日志来管理容器化应用，包括自动扩展和负载均衡。</li></ol><h2 id="🔍-常见问题排查"><a href="#🔍-常见问题排查" class="headerlink" title="🔍 常见问题排查"></a>🔍 常见问题排查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口冲突：</span></span><br><span class="line">netstat -tuln | grep 5000</span><br><span class="line"><span class="comment"># 查看容器日志：</span></span><br><span class="line">docker logs -f &lt;container_id&gt;</span><br><span class="line"><span class="comment"># 进入运行中容器：</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container_id&gt; bash</span><br><span class="line"><span class="comment"># 清理无用资源：</span></span><br><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure><h2 id="📚-​延伸阅读​"><a href="#📚-​延伸阅读​" class="headerlink" title="📚 ​延伸阅读​"></a>📚 ​延伸阅读​</h2><p><a href="https://docs.docker.com/">官方文档</a><br><a href="https://docs.docker.com/build/building/best-practices/">Docker最佳实践</a><br><a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/">Kubernetes入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 容器技术 </category>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器化 </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🚀 本地部署大语言模型全指南 - Ollama + Open WebUI 实践</title>
      <link href="/2024/11/12/5/"/>
      <url>/2024/11/12/5/</url>
      
        <content type="html"><![CDATA[<!-- ![Ollama架构图](https://ollama.com/public/ollama-architecture.png) --><h2 id="🌟-为什么选择Ollama？"><a href="#🌟-为什么选择Ollama？" class="headerlink" title="🌟 为什么选择Ollama？"></a>🌟 为什么选择Ollama？</h2><table><thead><tr><th>特性</th><th>Ollama本地部署</th><th>云端AI服务</th></tr></thead><tbody><tr><td>​<strong>隐私性</strong>​</td><td>🔒 数据完全本地处理</td><td>☁️ 数据需上传云端</td></tr><tr><td>​<strong>可用性</strong>​</td><td>🌐 完全离线可用</td><td>📶 依赖网络连接</td></tr><tr><td>​<strong>成本</strong>​</td><td>💰 免费开源</td><td>💸 订阅制付费</td></tr><tr><td>​<strong>自定义程度</strong>​</td><td>🛠️ 可完全自定义模型</td><td>⚙️ 有限定制</td></tr></tbody></table><blockquote><p>💡 适合场景：敏感数据处理&#x2F;网络不稳定环境&#x2F;长期使用成本考量</p></blockquote><h2 id="🛠️-准备工作"><a href="#🛠️-准备工作" class="headerlink" title="🛠️ 准备工作"></a>🛠️ 准备工作</h2><h3 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h3><ul><li><p>​<strong>最低配置</strong>​：</p><ul><li>CPU：4核 (推荐Intel&#x2F;AMD 64位)</li><li>内存：16GB</li><li>显存：8GB (NVIDIA&#x2F;AMD)</li><li>存储：40GB可用空间</li></ul></li><li><p>​<strong>推荐配置</strong>​：</p><ul><li>CPU：8核以上</li><li>内存：32GB+</li><li>显存：12GB+ (RTX 3060及以上)</li><li>存储：NVMe SSD</li></ul></li></ul><h3 id="软件依赖"><a href="#软件依赖" class="headerlink" title="软件依赖"></a>软件依赖</h3><ol><li><a href="https://ollama.com/download">Ollama官方客户端</a></li><li><a href="https://www.docker.com/products/docker-desktop">Docker Desktop</a></li><li>Git (可选，用于源码部署)</li></ol><hr><h2 id="📥-安装指南"><a href="#📥-安装指南" class="headerlink" title="📥 安装指南"></a>📥 安装指南</h2><h3 id="第一步：安装Ollama核心"><a href="#第一步：安装Ollama核心" class="headerlink" title="第一步：安装Ollama核心"></a>第一步：安装Ollama核心</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux/macOS一键安装</span></span><br><span class="line">curl -fsSL https://ollama.com/install.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows用户请下载exe安装包</span></span><br></pre></td></tr></table></figure><h3 id="第二步：验证安装"><a href="#第二步：验证安装" class="headerlink" title="第二步：验证安装"></a>第二步：验证安装</h3><p>下载完成后打开安装包，点击Install进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ollama --version</span><br><span class="line"><span class="comment"># 预期输出：ollama version 0.1.xx</span></span><br></pre></td></tr></table></figure><p>至此Ollama安装完毕，但要跟Ollama进行互动，事实上还需要一个操作界面“Open WebUI”<br>而Open WebUI必须要在Docker的环境中才能运行，<a href="/2024/11/11/4/">Docker 安装全平台指南</a></p><h3 id="第三步：部署Open-WebUI-Docker方式"><a href="#第三步：部署Open-WebUI-Docker方式" class="headerlink" title="第三步：部署Open WebUI (Docker方式)"></a>第三步：部署Open WebUI (Docker方式)</h3><p>确保拥有Docker容器并处在运行的状态后就可以进行Open WebUI的部署。<br>首先进入Open WebUI的官网<a href="https://docs.openwebui.com/">https://docs.openwebui.com</a><br>根据官方文档描述来进行对应的安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例以官方文档为准</span></span><br><span class="line"><span class="comment"># 创建专用网络</span></span><br><span class="line">docker network create ollama-net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Open WebUI容器</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --name open-webui \</span><br><span class="line">  --network ollama-net \</span><br><span class="line">  -p 3000:8080 \</span><br><span class="line">  -v open-webui:/app/backend/data \</span><br><span class="line">  -e OLLAMA_BASE_URL=http://ollama:11434 \</span><br><span class="line">  --restart always \</span><br><span class="line">  ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><p>等待安装完成后在Docker中会多出一个Open WebUI的项目。</p><h3 id="第四步：初始化配置"><a href="#第四步：初始化配置" class="headerlink" title="第四步：初始化配置"></a>第四步：初始化配置</h3><p>访问 <a href="http://localhost:3000/">http://localhost:3000</a><br>创建管理员账户（首个账户自动获得管理员权限）<br>接下来就会来到一个跟ChatGPT非常类似的界面，这里可以点击左下角将语言改成中文。<br>还有一些参数可以自行调整<br>在设置中：<br>切换语言为中文<br>调整”最大上下文长度”为4096<br>启用”流式响应”</p><h2 id="🤖-模型部署实战"><a href="#🤖-模型部署实战" class="headerlink" title="🤖 模型部署实战"></a>🤖 模型部署实战</h2><p>接下来就是模型的选择<br>Ollama有整理出当前最受欢迎的开源语言模型，这里我们选择qwen2.5（通义千问）。<br>根据本地物理设备的能力选择合适的训练数据集模型。<br>8g显存可以使用7B的训练量。</p><h3 id="模型下载示例"><a href="#模型下载示例" class="headerlink" title="模型下载示例"></a>模型下载示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在cmd命令行中输入：</span></span><br><span class="line">ollama run qwen-2.5-7B</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看已安装模型</span></span><br><span class="line">ollama list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除模型</span></span><br><span class="line">ollama <span class="built_in">rm</span> qwen-2.5-7B</span><br></pre></td></tr></table></figure><h3 id="性能优化技巧"><a href="#性能优化技巧" class="headerlink" title="性能优化技巧"></a>性能优化技巧</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用GPU加速（NVIDIA）</span></span><br><span class="line"><span class="built_in">export</span> CUDA_VISIBLE_DEVICES=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制显存使用（8GB显存示例）</span></span><br><span class="line">ollama run qwen2:7b --num-gpu-layers 35 --ctx-size 4096</span><br></pre></td></tr></table></figure><h2 id="🔍-常见问题排查"><a href="#🔍-常见问题排查" class="headerlink" title="🔍 常见问题排查"></a>🔍 常见问题排查</h2><h3 id="1-下载中断"><a href="#1-下载中断" class="headerlink" title="1. 下载中断"></a>1. 下载中断</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除缓存后重试</span></span><br><span class="line">ollama <span class="built_in">rm</span> qwen2:7b</span><br><span class="line">ollama run qwen2:7b</span><br></pre></td></tr></table></figure><h3 id="2-显存不足"><a href="#2-显存不足" class="headerlink" title="2. 显存不足"></a>2. 显存不足</h3><ol><li>改用更小参数的模型（如从7B降到4B）</li><li>增加交换空间（Linux）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> fallocate -l 16G /swapfile</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 600 /swapfile</span><br><span class="line"><span class="built_in">sudo</span> mkswap /swapfile</span><br><span class="line"><span class="built_in">sudo</span> swapon /swapfile</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-WebUI无法连接"><a href="#3-WebUI无法连接" class="headerlink" title="3. WebUI无法连接"></a>3. WebUI无法连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查容器状态</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker logs open-webui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">docker restart open-webui</span><br></pre></td></tr></table></figure><h2 id="🚀-进阶配置"><a href="#🚀-进阶配置" class="headerlink" title="🚀 进阶配置"></a>🚀 进阶配置</h2><h3 id="自定义模型微调"><a href="#自定义模型微调" class="headerlink" title="自定义模型微调"></a>自定义模型微调</h3><h4 id="1-创建Modelfile："><a href="#1-创建Modelfile：" class="headerlink" title="1.创建Modelfile："></a>1.创建Modelfile：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM qwen2:7b</span><br><span class="line">PARAMETER num_ctx 4096</span><br><span class="line">SYSTEM <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">你是一个专业的中文AI助手，回答请使用礼貌用语。</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-构建自定义模型："><a href="#2-构建自定义模型：" class="headerlink" title="2.构建自定义模型："></a>2.构建自定义模型：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama create my-ai -f Modelfile</span><br></pre></td></tr></table></figure><h3 id="外部访问配置"><a href="#外部访问配置" class="headerlink" title="外部访问配置"></a>外部访问配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用远程访问（生产环境需配置SSL）</span></span><br><span class="line">docker run -d \</span><br><span class="line">    -p 3000:8080 \</span><br><span class="line">    -e OPEN_WEBUI_API=http://your-server-ip:11434 \</span><br><span class="line">    ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><h2 id="📚-​延伸阅读"><a href="#📚-​延伸阅读" class="headerlink" title="📚 ​延伸阅读"></a>📚 ​延伸阅读</h2><ol><li><a href="https://ollama.ai/">Ollama</a></li><li><a href="https://github.com/open-webui/open-webui">OpenWebUI</a></li><li><a href="https://chat.openai.com/">ChatGPT</a></li><li><a href="https://huggingface.co/docs/transformers/training">模型微调指南</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> AI部署 </category>
          
          <category> 本地化方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Ollama </tag>
            
            <tag> 大语言模型 </tag>
            
            <tag> 本地AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装与验证指南</title>
      <link href="/2024/11/11/4/"/>
      <url>/2024/11/11/4/</url>
      
        <content type="html"><![CDATA[<h1 id="🐳-Docker-安装全平台指南"><a href="#🐳-Docker-安装全平台指南" class="headerlink" title="🐳 Docker 安装全平台指南"></a>🐳 Docker 安装全平台指南</h1><p>Docker 是一个开源的容器化平台，能够帮助开发者轻松打包、部署和运行应用程序。本指南将详细介绍各平台的安装方法。</p><h2 id="🌍-安装前准备"><a href="#🌍-安装前准备" class="headerlink" title="🌍 安装前准备"></a>🌍 安装前准备</h2><ul><li>确保系统满足最低要求</li><li>管理员&#x2F;root 权限</li><li>稳定的网络连接</li></ul><h2 id="📥-各平台安装教程"><a href="#📥-各平台安装教程" class="headerlink" title="📥 各平台安装教程"></a>📥 各平台安装教程</h2><h3 id="🪟-Windows-安装"><a href="#🪟-Windows-安装" class="headerlink" title="🪟 Windows 安装"></a>🪟 Windows 安装</h3><ol><li>访问 <a href="https://www.docker.com/products/docker-desktop">Docker 官网</a></li><li>下载 ​<strong>Docker Desktop for Windows</strong>​ 安装包</li><li>双击运行安装程序</li><li>按照向导完成安装<ul><li>启用 WSL2 后端（推荐）</li><li>勾选 “Add docker to PATH”</li></ul></li></ol><h3 id="🍎-macOS-安装"><a href="#🍎-macOS-安装" class="headerlink" title="🍎 macOS 安装"></a>🍎 macOS 安装</h3><ol><li>访问 <a href="https://www.docker.com/products/docker-desktop">Docker 官网</a></li><li>下载 ​<strong>Docker Desktop for Mac</strong>​ 安装包</li><li>拖动 Docker 图标到 Applications 文件夹</li><li>首次运行时：<ul><li>授权安装</li><li>建议配置：<ul><li>内存：≥4GB</li><li>CPU：≥2核</li></ul></li></ul></li></ol><h3 id="🐧-Linux-安装"><a href="#🐧-Linux-安装" class="headerlink" title="🐧 Linux 安装"></a>🐧 Linux 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils</span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="built_in">sudo</span> yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fedora</span></span><br><span class="line"><span class="built_in">sudo</span> dnf install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="✅-安装验证"><a href="#✅-安装验证" class="headerlink" title="✅ 安装验证"></a>✅ 安装验证</h2><p>安装完成后，在终端&#x2F;PowerShell 中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>预期输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Docker version 20.10.12, build e91ed57</span><br><span class="line">Hello from Docker!</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="📝-小贴士"><a href="#📝-小贴士" class="headerlink" title="📝 小贴士"></a>📝 小贴士</h2><p>安装后建议重启系统<br>遇到权限问题可以尝试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><h2 id="学习基础命令"><a href="#学习基础命令" class="headerlink" title="学习基础命令"></a>学习基础命令</h2><p>docker pull - 下载镜像<br>docker run - 运行容器<br>docker ps - 查看容器<br>docker stop - 停止容器<br>docker rm - 删除容器<br>docker images - 查看镜像<br>docker rmi - 删除镜像</p><h2 id="📚-延伸阅读"><a href="#📚-延伸阅读" class="headerlink" title="📚 延伸阅读"></a>📚 延伸阅读</h2><ul><li><a href="https://docs.docker.com/get-started/">Docker 官方文档</a></li><li><a href="https://docs.docker.com/get-docker/">Docker 官方安装指南</a></li><li><a href="https://hub.docker.com/">Docker 官方镜像仓库</a></li><li><a href="https://www.docker.com/blog/">Docker 官方博客</a></li><li><a href="https://forums.docker.com/">Docker 官方论坛</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器化 </tag>
            
            <tag> 开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🪵 木桶哲学：论自我接纳与人生价值</title>
      <link href="/2024/09/18/3/"/>
      <url>/2024/09/18/3/</url>
      
        <content type="html"><![CDATA[<h2 id="想得开"><a href="#想得开" class="headerlink" title="想得开"></a>想得开</h2><p>最近我阅读到一则有趣的故事，它讲述了一位老木匠砍下了一棵树，然后做了三个木桶，分别用来装水、酒和粪便。水桶让众人受益，酒桶让众人欣赏，而粪桶则让众人避之唯恐不及。这则故事让我意识到，我们每个人都像这个木匠手中的三个桶一样，同样出自一个源头，但我们的命运却因所含的东西不同而不同。</p><p>读完这则故事，我开始思考，貌似“酒桶”是最高级的，“水桶”是普遍的，而“粪桶”的形象则是令人作呕的。这让我感到有些不安，因为我并不知道自己应该属于哪一种桶。然而，我想到每个人的经历和人生不同，如果能充分发挥所长的话，即便是作为幸福的“粪桶”也不失为一种美好的存在。毕竟，在生活中使用粪桶也是至关重要的。</p><p>朋友听到我如此说，不由笑道：“谁愿意做粪桶呀？看不出，你还蛮想得开。”我觉得想得开，其实并不难。我们常常因为一些小事儿而把自己弄得很不开心，但如果能够用一种正确的心态来处理这些事情，就会更加快乐。</p><p>首先，我们需要接受现实。有时候，我们会对某些事情有着过高的期望，都希望成为“酒桶”,而当事情并不如我们所愿时，就会感到失望或沮丧。但是，如果我们在开始时就对现实有着正确的认识，并接受这个情况，那我们就会释然很多。</p><p>其次，我们需要学会调整自己的态度。有时候，我们会把自己的情绪和态度都放在了别人身上。如果我们学会放下自己的情绪和态度，并在更积极的角度来看待事情，我们就会感到快乐和欣慰。</p><p>最后，我们需要学会自我调节。有时，我们会感到自己的心情因为周围的事物而变得沮丧或不开心。但如果我们能够意识到自己的情绪，并在时间允许的情况下，采取一些积极和正面的行动来改善这种情况，我们就会感到快乐和有成就感。</p><p>这则故事还让我深思之处在于：会不会有更差劲的状况，即：我只是那些被浪费的边角料，甚至没有资格做一个完整的桶呢？这样想，我感到十分沮丧。但随后我又意识到，这些被忽略的材料仍然有其价值，它们可以填补空缺，驱寒取暖，甚至可以成为一件艺术品。</p><p>随着社会的发展，传统的职业已经有了丰富的延伸和拓展。任何人只要发挥自己的特长，都能够发挥作用。就算我们无法做成一个完整的木桶，我们也可以成为木片、螺丝钉等等朴素材料。这同样是一种快乐和有意义的生活方式。</p><p>想得开，关键是要自己找到正确的心态和适应自己的方式。只要我们能够遵循这些基本原则，我们就会有更加快乐的生活。<br>（转载）</p>]]></content>
      
      
      <categories>
          
          <category> 生活哲学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心态调整 </tag>
            
            <tag> 自我认知 </tag>
            
            <tag> 人生智慧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🌕 中秋佳节 | 明月寄相思，美好共此时</title>
      <link href="/2024/09/17/2/"/>
      <url>/2024/09/17/2/</url>
      
        <content type="html"><![CDATA[<!-- <div style="text-align: center; margin: 2em 0;">  <img src="https://example.com/mooncake.png" alt="中秋月饼插图" width="200" style="border-radius: 50%; box-shadow: 0 4px 12px rgba(0,0,0,0.15);"></div> --><h2 id="🌟-致我最亲爱的读者们"><a href="#🌟-致我最亲爱的读者们" class="headerlink" title="🌟 致我最亲爱的读者们"></a>🌟 致我最亲爱的读者们</h2><p>金风送爽，桂子飘香，又是一年中秋至。当这轮如玉的明月悄然爬上枝头，我愿将最美好的祝愿，托明月清风送至你的身旁。</p><blockquote><p>“海上生明月，天涯共此时”<br>—— 张九龄《望月怀远》</p></blockquote><h2 id="🏮-中秋三愿"><a href="#🏮-中秋三愿" class="headerlink" title="🏮 中秋三愿"></a>🏮 中秋三愿</h2><ol><li><p>​<strong>一愿家和人安</strong>​<br>愿月光温柔洒落每个家庭的窗台，亲人围坐，笑语盈盈，共享天伦之乐</p></li><li><p>​<strong>二愿前程似锦</strong>​<br>如这中秋满月般，事业圆满，学业精进，所有努力都能开花结果</p></li><li><p>​<strong>三愿情谊长存</strong>​<br>虽隔山海，心意相通，感谢你们一直以来的陪伴与支持</p></li></ol><h2 id="🥮-中秋小知识"><a href="#🥮-中秋小知识" class="headerlink" title="🥮 中秋小知识"></a>🥮 中秋小知识</h2><table><thead><tr><th>传统习俗</th><th>现代演变</th><th>推荐体验</th></tr></thead><tbody><tr><td>祭月拜月</td><td>月光摄影大赛</td><td>用相机捕捉最美月色</td></tr><tr><td>赏桂饮茶</td><td>中秋主题下午茶</td><td>尝试制作桂花拿铁</td></tr><tr><td>燃灯猜谜</td><td>线上灯谜会</td><td>与好友视频猜谜</td></tr><tr><td>分享月饼</td><td>创意月饼DIY</td><td>制作冰皮月饼赠亲友</td></tr></tbody></table><h2 id="✨-月光下的思考"><a href="#✨-月光下的思考" class="headerlink" title="✨ 月光下的思考"></a>✨ 月光下的思考</h2><p>在这个特别的夜晚，不妨：</p><ul><li>给久未联系的亲友发条问候</li><li>记录下此刻的心情随笔</li><li>准备一盏花灯写下心愿</li><li>单纯欣赏这难得的明月清辉</li></ul>]]></content>
      
      
      <categories>
          
          <category> 节日祝福 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中秋节 </tag>
            
            <tag> 传统文化 </tag>
            
            <tag> 节日问候 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2024/09/16/1/"/>
      <url>/2024/09/16/1/</url>
      
        <content type="html"><![CDATA[<h2 id="blog诞生啦！"><a href="#blog诞生啦！" class="headerlink" title="blog诞生啦！"></a>blog诞生啦！</h2><p>blog诞生啦！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
